z <- c(1.1, 9 , 3.14)
?c
z
c(z,555,z)
z*2 + 100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2 + 1000
my_div
getwd()
ls()
x<-9
ls()
list.files()
?list.files
args(list.files())
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("~\testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
?file.path
file.path("folder1", "folder2")
?dir.create
dir.create("testdir2/testdir2")
dir.create("testdir2/testdir3")
dir.create(filepath('testdir2', 'testdir3'), recursive=TRUE)
dir.create(file.path('testdir2', 'testdir3'), recursive=TRUE)
unlink("testdir2", recursive=TRUE)
setwd(old.dir)
unlink("testdir", recursive=TRUE)
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq=seq(5,10,length=30)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect<-c(0.5,55,-10,6)
tf <- num_vect<1
tf
num_vect>=6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse=" ")
my_name<-c(my_char, "Victor")
my_name
paste(my_name,collapse=" ")
paste("Hello", "world!", sep=" ")
paste(c(1,2,3),c("X","Y","Z"),sep="")
paste(c(1,2,3),c("X","Y","Z"),sep="")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS, 1:4, sep = "-")
x<-c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z), 100)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
inf - inf
Inf - Inf
swirl()
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
indentical(vect, vect2)
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2<-matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
TRUE == FALSE
TRUE == TRUE
(FALSE == TRUE ) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints >5
which(ints>7)
any(ints<0)
all(ints>0)
x<-2
if(x<3) {y<-10} else {y<-0}
y
for( i in 1:10) {print(i)}
x<-c("a"."b","c","d")
x<-c("a","b","c","d")
seq_along(x)
z<-5
while (z>=3 && z<= 10) {print(z)  z<- z -1 + 2*rbinom(1,1,0.5)}
while (z>=3 && z<= 10) {print(z)  z<- z-1+2*rbinom(1,1,0.5)}
while (z>=3 && z<= 10) {}
x1<-computerEstimate()
x1<-computeEstimate()
add2 <- function(x, y) {
x+y
}
add2(3,5)
above10 <- function(x) {
use <- x>10
x[use]
}
x<-c(1,10,2,1,4,30,50)
above10(x)
airquality
View(add2)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
parent.frame()
data(irs)
data(iris)
?iris
iris <- data(iris)
data(iris)
library(datasets)
data(iris)
i<-data(iris)
print(i)
View(iris)
lapply(iris,mean)
i<-split(iris, iris$Species)
print(i)
lapply(split(iris, iris$Species), mean)
lapply(split(iris,iris$Species), function(x) colMeans(x[,"Sepal.Length"]))
sapply(split(iris,iris$Species), function(x) colMeans(x[,"Sepal.Length"]))
rowMeans(iris)
print(iris[[Species="virginica"]])
print(iris[[Species=="virginica"]])
View(iris)
View(iris)
i<-split(iris, c["virginica","versicolor","setosa"])
i<-split(iris,iris$Species)
lapply(i, function(x) colMeans(x[,"Species"]))
lapply(i, function(x) colMeans(x[,"Species"]))
lapply(i, function(x) colMeans(x[,"Sepal.Length"]))
lapply(i, function(x) colMeans(x[,c("Sepal.Length"]))
lapply(i, function(x) colMeans(x[,c("Sepal.Length")]))
print(i[,"Species"])
print(i[1,"Species"])
print(i[1:10)
print(i[1:10,2)
print(i[1:10,2])
print(iris[1:10,2])
print(iris[1:10,])
print(iris[,Species="virginica"])
print(iris[,Species=="virginica"])
print(i[3])
colMeans(i[3])
lapply(i[3], mean)
lapply(iris, mean)
sapply(iris, mean)
sapply(i[3],mean)
levels <- levels(iris#Species)
)
print(levels)
levels <- levels(iris$Species)
print(levels)
i <- apply(iris, levels, mean)
v<- i[3]
print(v)
colMeans(v)
lapply(v, mean)
lapply(iris, mean)
lapply(v, mean)
lapply(v[1], mean)
sapply(i[3], mean)
sapply(iris, mean)
sapply(iris$Sepal.Length, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
colMeans(iris)
apply(iris[,1:4], mean)
apply(iris[,1:4],2, mean)
data(mtcars)
?mtcars
View(mtcars)
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
by(mtcars, cyl, mean)
by(mtcars, mtcars$cyl, mean)
with(mtcars, tapply(hp, cyl, mean))
i<with(mtcars, tapply(hp, cyl, mean))
i<-with(mtcars, tapply(hp, cyl, mean))
print i
print(i)
i[3]-i[1]
82.63636 + 126.5779
debug(ls)
ls()
mm <- matrix(1:10000;100;100)
mm <- matrix(1:10000,100,100)
print(mm)
solve(mm)
dim(mm)
x <- stats::rnorm(16)
print(x)
dim(x) <- c(4,4)
print(x)
solve(x)
x <- stats::rnorm(1048576)
dim(x) <- c(1024,1024)
solve(x)
source('~/R/prog2/ProgrammingAssignment2/cachematrix.R')
mmc <- makeCacheMatrix(x)
cacheSolve(mmc)
mmcs <- cacheSolve(mmc)
mmc <- makeCacheMatrix(x)
mmcs <- cacheSolve(mmc)
mmcs <- cacheSolve(mmc)
source('~/R/prog2/ProgrammingAssignment2/cachematrix.R')
mmc <- makeCacheMatrix(x)
mmc <- makeCacheMatrix(x)
mmc <- makeCacheMatrix(x)
mmcs <- cacheSolve(mmc)
mmcs <- cacheSolve(mmc)
swirl()
library(swirl)
swirl()
swirl()
swirl()
swirl()
library(swirl)
swirl()
sys.date()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function()
boring_function
submit()
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11, num=5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(sd, c(1.5, 3.6, 7.9, 8.8))
evaluate(sd(), c(1.5, 3.6, 7.9, 8.8))
evaluate(sd, c(1.5, 3.6, 7.9, 8.8))
info()
debug(evaluate)
evaluate(sd, c(1.5, 3.6, 7.9, 8.8))
q
swirl()
set.seed(1)
rnorm(5)
ppois(2,2)
Rprof()
x<- rnorm(100000,4,3)
x<- rnorm(100000000,4,3)
summaryRprof()
set.seed(1)
rpois(5,2)
set.seed(10)
x<-rep(0:1, each=5)
x
print("hello!")
setwd("~/R/repdata/RepData_PeerAssessment1")
activity <- read.csv("activity.csv")
activity$datepsx <- as.POSIXlt(activity$date)
activity$datepsx$year
activity$datepsx$day
activity$datepsx$month
as.POSIXlt("2012-02-01")
year(as.POSIXlt("2012-02-01"))
as.POSIXlt("2012-02-01")$year
as.POSIXlt("2012-02-01")$day
?as.POSIXlt
as.POSIXct(strptime("2012-02-01","%Y-%m-%d"))
View(activity)
library(dplyr)
steps.per.day <- activity %>% group_by(date) %>% summarize(total.steps=sum(steps, na.rm=TRUE))
activity$date <- as.POSIXct(strptime(activity$date,"%Y-%m-%d"))
steps.per.day <- activity %>% group_by(date) %>% summarize(total.steps=sum(steps, na.rm=TRUE))
unzip("activity.zip")
activity <- read.csv("activity.csv")
head(activity)
dim(activity)
activity$date <- as.POSIXct(strptime(activity$date,"%Y-%m-%d"))
steps.per.day <- activity %>% group_by(date) %>% summarize(total.steps=sum(steps, na.rm=TRUE))
View(steps.per.day)
hist(steps.per.day$total.steps, bin=20)
?hist
hist(steps.per.day$total.steps, breaks=20)
x <- summary(steps.per.day$total.steps)
x
x$median
x$table$mean
str(x)
x[c(3,4),]
x[c(3,4)]
View(activity)
interval <- activity %>% group_by(interval) %>% summary(average=mean(steps, na.rm=TRUE), maximum=max(steps, na.rm=TRUE))
interval <- activity %>% group_by(interval) %>% summarize(average=mean(steps, na.rm=TRUE), maximum=max(steps, na.rm=TRUE))
View(interval)
?plot
plot(interval$interval, interval$average, type="l")
interval[interval$average==max(interval$average)]$interval
interval[interval$average==max(interval$average)]
?max
max(interval$average)
which.max(interval$average)
interval[which.max(interval$interval)]$interval
interval[which.max(interval$interval)]
interval[which.max(interval$interval),]
interval[which.max(interval$interval),]$interval
interval[which.max(interval$maximum),]
max(interval$maximum)
miss <- is.na(activity$steps)
sum(miss)
miss
act2 <- activity
act2$steps <- ifelse(miss, interval$average[match(act2$interval, interval$interval), act2$steps]
)
?match
match(c(3,5,6), c(1,2,3,4,5,6,7,8,9))
match(c(3,5,6), c(0,1,2,3,4,5,6,7,8,9))
act2$steps <- ifelse(miss, interval$average[match(act2$interval, interval$interval)], act2$steps)
View(act2)
View(act2)
View(activity)
View(act2)
unzip("activity.zip")
activity <- read.csv("activity.csv")
head(activity)
dim(activity)
activity$date <- as.POSIXct(strptime(activity$date,"%Y-%m-%d"))
interval <- activity %>% group_by(interval) %>% summarize(average=mean(steps, na.rm=TRUE))
miss <- is.na(activity$steps)
sum(miss)
imputed <- activity
imputed$steps <- ifelse(miss, interval$average[match(imputed$interval, interval$interval)], imputed$steps)
steps.per.day.imputed <- imputed %>% group_by(date) %>% summarize(total.steps=sum(steps, na.rm=TRUE))
hist(steps.per.day.imputed$total.steps,
breaks=20,
xlab="Total steps taken per day",
main="Overview of total steps taken per day, imputing missing values")
?mean
backup <- activity
backup$wdf <- weekday(backup$date)
?weekdays
backup$wdf <- weekdays(backup$date)
View(backup)
backup$wdf <- weekdays(backup$date, abbreviate=FALSE)
View(backup)
backup$wdf <- ifelse(match(weekdays(backup$date), c("zondag","zaterdag")), 0, 1)
backup$wdf <- weekdays(backup$date, abbreviate=FALSE)
match(c("maandag","zondag"),c("zondag","zaterdag"))
## Set locale to show English days instead of Dutch days
Sys.setlocale("LC_TIME","C")
backup$wdf <- weekdays(backup$date, abbreviate=FALSE)
activity$name.of.day <- weekdays(activity$name.of.day)
activity$name.of.day <- weekdays(activity$date)
View(activity)
activity$name.of.day <- as.factor(weekdays(activity$date))
View(activity)
str(activity$name.of.day)
levels(activity$name.of.day)
activity$name.of.day[4]
activity$name.of.day[4]=="Saturday"
activity$name.of.day[4]=="Monday"
## Make the variable with the name spelled out
activity$name.of.day <- weekdays(activity$date)
## create the base ind.weekday on the activity file and set it to 0 if it is a weekendday, and 1 if it is a weekday.
activity$ind.weekday <- ifelse(activity$name.of.day == "Saturday" | activity$name.of.day =="Sunday", 0, 1)
View(activity)
## Make the variable with the name spelled out
activity$name.of.day <- weekdays(activity$date)
## create the base ind.weekday on the activity file and set it to 0 if it is a weekendday, and 1 if it is a weekday.
activity$ind.weekday <- ifelse(activity$name.of.day == "Saturday" | activity$name.of.day =="Sunday", 0, 1)
## make it into an appropriate factor variable
activity$ind.weekday <- factor(activity$ind.weekday, levels=c(0,1), labels=c("Weekend-day","Week-day"))
View(activity)
new.interval <- activity %>% group_by(ind.weekday, interval) %>% summarize(average=mean(steps, na.rm=TRUE))
View(new.interval)
x <- new.interval$interval[new.interval$ind.weekday==0]
x <- new.interval[new.interval$ind.weekday==0]
View(new.interval)
## plot weekenddays first. I use x and y helper variables here to help with readability of the code.
x <- new.interval[new.interval$ind.weekday=="Weekend-day"]
View(x)
weekend <- new.interval[ind.weekday==0,]
weekend <- new.interval[new.interval$ind.weekday==0,]
weekend <- new.interval[new.interval$ind.weekday=="Weekend-day",]
par(mfrow=c(2,1))
## plot weekenddays first.
weekend <- new.interval[ind.weekday=="Weekend-day",]
plot(weekend$interval, weekend$average, type="l",
xlab="5 minute interval",
ylab="Average number of steps taken",
main="Steps taken during weekend days")
## and now weekdays
week <- new.interval[ind.weekday=="Week-day",]
plot(week$interval, week$average, type="l",
xlab="5 minute interval",
ylab="Average number of steps taken",
main="Steps taken during week days")
## Calculate the new average value
new.interval <- activity %>% group_by(ind.weekday, interval) %>% summarize(average=mean(steps, na.rm=TRUE))
## plot weekenddays first.
weekend <- new.interval[ind.weekday=="Weekend-day",]
View(new.interval)
View(activity)
View(new.interval)
new.interval <- activity %>% group_by(ind.weekday, interval) %>% summarize(average=mean(steps, na.rm=TRUE))
## Set plot to 1x2
par(mfrow=c(2,1))
## plot weekenddays first.
weekend <- new.interval[new.interval$ind.weekday=="Weekend-day",]
plot(weekend$interval, weekend$average, type="l",
xlab="5 minute interval",
ylab="Average number of steps taken",
main="Steps taken during weekend days")
## and now weekdays
week <- new.interval[new.interval$ind.weekday=="Week-day",]
plot(week$interval, week$average, type="l",
xlab="5 minute interval",
ylab="Average number of steps taken",
main="Steps taken during week days")
package(knitr)
library(knitr)
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
